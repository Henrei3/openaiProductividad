from backend.Model.DB.SQLServerModel import SQLSERVERDBModel
from backend.Controller.pathFinder import JSONFinder
from backend.Controller.analyser import SpeechRefinement
from backend.Controller.PostGreSQLController import PostgreController

class SQLServerController:
    def __init__(self):
        self.cnxn = SQLSERVERDBModel()

    @staticmethod
    def add_qa_processes(id_grabacion, nombre, scores):
        server = SQLSERVERDBModel()
        server.create_tables()

        telefono = nombre[4:-34]
        fecha = nombre[19:-14]

        jsonfinder = JSONFinder("../analysed_records/audio_text")

        audio = jsonfinder.find(nombre)

        refined_audio = SpeechRefinement.refine_speech_textOpenAI(audio['text'])

        server.add_grabaciones(id_grabacion, nombre, telefono, fecha, refined_audio)

        server.add_autogenerated_scores(id_grabacion, scores)

    def add_grabaciones(self, g_id: str, name: str, audio_text: str):

        model = SQLSERVERDBModel()
        existing_name = model.get_grabacion_given_name(name)
        if existing_name is None:
            date = self.get_date_recording_format(name)
            cellphone = PostgreController.find_cellphone_in_recording_format(name)

            model.add_grabaciones(g_id, name, cellphone, date, audio_text)

            return True
        else:
            return False

    def add_calificaciones(self, name: str, score_ticket: dict):
        model = SQLSERVERDBModel()

        grabacion = model.get_grabacion_given_name(name)
        grabacion_id = grabacion[0]
        existing_calificacion = model.get_calificacion_given_id(grabacion_id)
        if existing_calificacion is None:
            model.add_autogenerated_scores(grabacion_id, score_ticket)
            return True
        else: return False
    def get_positive_sentences_from_cedente(self, cedente: str):
        serial_ced = self.cnxn.get_serialced_from_cedente(cedente)
        if serial_ced and self.cnxn.get_positive_sentences(serial_ced[0]):
            return self.cnxn.get_positive_sentences(serial_ced[0])
        cedente_general_ced = self.cnxn.get_serialced_from_cedente("CEDENTE_GENERAL")
        if not cedente_general_ced:
            self.cnxn.setup_cedente_general()
            cedente_general_ced = self.cnxn.get_serialced_from_cedente("CEDENTE_GENERAL")
            return self.cnxn.get_positive_sentences(cedente_general_ced[0])
        else:
            return self.cnxn.get_positive_sentences(cedente_general_ced[0])

    @staticmethod
    def get_date_recording_format(name: str):
        segmented_name = name.split('-')

        non_format_date = segmented_name[3]
        date_segments = list()
        date_segments.append(non_format_date[0:4])
        for i in range(4, len(non_format_date), 2):
            date_segments.append(non_format_date[i:i+2])
        date = "-"
        return date.join(date_segments)
